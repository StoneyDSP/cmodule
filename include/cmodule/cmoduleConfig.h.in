#pragma once

#ifndef INCLUDE_CMODULE_CONFIG_H_
#define INCLUDE_CMODULE_CONFIG_H_

/**
 * @brief cmakeDefined project configuration information.
 *
 */

#cmakedefine PROJECT_NAME ${PROJECT_NAME}
#cmakedefine PROJECT_DESCRIPTION ${PROJECT_DESCRIPTION}
#cmakedefine PROJECT_VERSION ${PROJECT_VERSION}
#cmakedefine PROJECT_HOMEPAGE_URL ${PROJECT_HOMEPAGE_URL}
#cmakedefine PROJECT_SOURCE_DIR ${PROJECT_SOURCE_DIR}
#cmakedefine PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}

// Value Computed by CMake
#cmakedefine CMAKE_PROJECT_NAME ${CMAKE_PROJECT_NAME}
// Value Computed by CMake
#cmakedefine CMAKE_PROJECT_DESCRIPTION ${CMAKE_PROJECT_DESCRIPTION}
// Value Computed by CMake
#cmakedefine CMAKE_PROJECT_HOMEPAGE_URL ${CMAKE_PROJECT_HOMEPAGE_URL}

//Value Computed by CMake
#cmakedefine ${PROJECT_NAME}_BINARY_DIR ${${PROJECT_NAME}_BINARY_DIR}
//Value Computed by CMake
#cmakedefine ${PROJECT_NAME}_IS_TOP_LEVEL ${${PROJECT_NAME}_IS_TOP_LEVEL}
//Value Computed by CMake
#cmakedefine ${PROJECT_NAME}_SOURCE_DIR ${${PROJECT_NAME}_SOURCE_DIR}


#cmakedefine CMAKE_VERSION ${CMAKE_VERSION}
#cmakedefine CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}
#cmakedefine CMAKE_TOOLCHAIN_FILE ${CMAKE_TOOLCHAIN_FILE}
#cmakedefine CMAKE_GENERATOR ${CMAKE_GENERATOR}

#cmakedefine CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}
#cmakedefine CMAKE_BINARY_DIR ${CMAKE_BINARY_DIR}
#cmakedefine CMAKE_LIST_DIR ${CMAKE_LIST_DIR}

#cmakedefine CMAKE_CFG_INTDIR "${CMAKE_CFG_INTDIR}"

#cmakedefine CMAKE_CURRENT_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}"
#cmakedefine CMAKE_CURRENT_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}"
#cmakedefine CMAKE_CURRENT_LIST_DIR "${CMAKE_CURRENT_LIST_DIR}"
#cmakedefine CMAKE_CURRENT_LIST_FILE "${CMAKE_CURRENT_LIST_FILE}"

#cmakedefine CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
#cmakedefine CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_LIBDIR}"
#cmakedefine CMAKE_INSTALL_BINDIR "${CMAKE_INSTALL_BINDIR}"
#cmakedefine CMAKE_INSTALL_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}"

#cmakedefine CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}"
#cmakedefine CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}"
#cmakedefine CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"

/**
 * INTERNAL cache entries
*/


// This is the directory where this CMakeCache.txt was created
#cmakedefine CMAKE_CACHEFILE_DIR ${CMAKE_CACHEFILE_DIR}
// Major version of cmake used to create the current loaded cache
#cmakedefine CMAKE_CACHE_MAJOR_VERSION ${CMAKE_CACHE_MAJOR_VERSION}
// Minor version of cmake used to create the current loaded cache
#cmakedefine CMAKE_CACHE_MINOR_VERSION ${CMAKE_CACHE_MINOR_VERSION}
// Patch version of cmake used to create the current loaded cache
#cmakedefine CMAKE_CACHE_PATCH_VERSION ${CMAKE_CACHE_PATCH_VERSION}
// Path to CMake executable.
#cmakedefine CMAKE_COMMAND ${CMAKE_COMMAND}
// Path to cpack program executable.
#cmakedefine CMAKE_CPACK_COMMAND ${CMAKE_CPACK_COMMAND}
// Path to ctest program executable.
#cmakedefine CMAKE_CTEST_COMMAND ${CMAKE_CTEST_COMMAND}
// Executable file format
#cmakedefine CMAKE_EXECUTABLE_FORMAT ${CMAKE_EXECUTABLE_FORMAT}
// Name of external makefile project generator.
#cmakedefine CMAKE_EXTRA_GENERATOR ${CMAKE_EXTRA_GENERATOR}
// Name of generator.
#cmakedefine CMAKE_GENERATOR ${CMAKE_GENERATOR}
// Generator instance identifier.
#cmakedefine CMAKE_GENERATOR_INSTANCE ${CMAKE_GENERATOR_INSTANCE}
// Name of generator platform.
#cmakedefine CMAKE_GENERATOR_PLATFORM ${CMAKE_GENERATOR_PLATFORM}
// Name of generator toolset.
#cmakedefine CMAKE_GENERATOR_TOOLSET ${CMAKE_GENERATOR_TOOLSET}
// Source directory with the top level CMakeLists.txt file for this project
#cmakedefine CMAKE_HOME_DIRECTORY ${CMAKE_HOME_DIRECTORY}
// Install .so files without execute permission.
#cmakedefine CMAKE_INSTALL_SO_NO_EXE ${CMAKE_INSTALL_SO_NO_EXE}
// ADVANCED property for variable: CMAKE_LINKER number of local generators
#cmakedefine CMAKE_NUMBER_OF_MAKEFILES ${CMAKE_NUMBER_OF_MAKEFILES}
// Platform information initialized
#cmakedefine CMAKE_PLATFORM_INFO_INITIALIZED ${CMAKE_PLATFORM_INFO_INITIALIZED}
// Path to CMake installation.
#cmakedefine CMAKE_ROOT ${CMAKE_ROOT}
// uname command
#cmakedefine CMAKE_UNAME ${CMAKE_UNAME}
// linker supports push/pop state
#cmakedefine _CMAKE_LINKER_PUSHPOP_STATE_SUPPORTED ${_CMAKE_LINKER_PUSHPOP_STATE_SUPPORTED}

// is TRUE on all UNIX-like OS's, including Apple OS X and CygWin
#cmakedefine UNIX ${UNIX}
// is TRUE on Windows, including CygWin
#cmakedefine WIN32 ${WIN32}
// is TRUE on Apple OS X
#cmakedefine APPLE ${APPLE}
// is TRUE when using the MinGW compiler in Windows
#cmakedefine MINGW ${MINGW}
// is TRUE on Windows when using the CygWin version of cmake
#cmakedefine CYGWIN ${CYGWIN}
// is TRUE on Windows when using WSL (experimental)
#cmakedefine WSL ${WSL}
// is TRUE on Windows when using a Borland compiler
#cmakedefine BORLAND ${BORLAND}
// is TRUE when using a debugger
#cmakedefine _DEBUG ${_DEBUG}
// is TRUE when not using a debugger
#cmakedefine NDEBUG ${NDEBUG}

// Microsoft compiler
#cmakedefine MSVC ${MSVC}
// Microsoft compiler
#cmakedefine MSVC_IDE ${MSVC_IDE}
// Microsoft compiler
#cmakedefine MSVC60 ${MSVC60}
// Microsoft compiler
#cmakedefine MSVC70 ${MSVC70}
// Microsoft compiler
#cmakedefine MSVC71 ${MSVC71}
// Microsoft compiler
#cmakedefine MSVC80 ${MSVC80}
// Microsoft compiler
#cmakedefine CMAKE_COMPILER_2005 ${CMAKE_COMPILER_2005}
// Microsoft compiler
#cmakedefine MSVC90 ${MSVC90}
// Microsoft compiler
#cmakedefine MSVC10 ${MSVC10}

// Path to a program.
#cmakedefine CMAKE_ADDR2LINE ${CMAKE_ADDR2LINE}
// Path to a program.
#cmakedefine CMAKE_AR ${CMAKE_AR}
// No help, variable specified on the command line.
#cmakedefine CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}
// No help, variable specified on the command line.
#cmakedefine CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER}
// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
#cmakedefine CMAKE_CXX_COMPILER_AR ${CMAKE_CXX_COMPILER_AR}
// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
#cmakedefine CMAKE_CXX_COMPILER_RANLIB ${CMAKE_CXX_COMPILER_RANLIB}
// Flags used by the CXX compiler during all build types.
#cmakedefine CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}
// Flags used by the CXX compiler during DEBUG builds.
#cmakedefine CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG}
// Flags used by the CXX compiler during MINSIZEREL builds.
#cmakedefine CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL}
// Flags used by the CXX compiler during RELEASE builds.
#cmakedefine CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE}
// Flags used by the CXX compiler during RELWITHDEBINFO builds.
#cmakedefine CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}
// No help, variable specified on the command line.
#cmakedefine CMAKE_C_COMPILER ${CMAKE_C_COMPILER}
// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
#cmakedefine CMAKE_C_COMPILER_AR ${CMAKE_C_COMPILER_AR}
// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
#cmakedefine CMAKE_C_COMPILER_RANLIB ${CMAKE_C_COMPILER_RANLIB}
// Flags used by the C compiler during all build types.
#cmakedefine CMAKE_C_FLAGS ${CMAKE_C_FLAGS}
// Flags used by the C compiler during DEBUG builds.
#cmakedefine CMAKE_C_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG}
// Flags used by the C compiler during MINSIZEREL builds.
#cmakedefine CMAKE_C_FLAGS_MINSIZEREL ${CMAKE_C_FLAGS_MINSIZEREL}
// Flags used by the C compiler during RELEASE builds.
#cmakedefine CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE}
// Flags used by the C compiler during RELWITHDEBINFO builds.
#cmakedefine CMAKE_C_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO}
// Path to a program.
#cmakedefine CMAKE_DLLTOOL ${CMAKE_DLLTOOL}
// Flags used by the linker during all build types.
#cmakedefine CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS}
// Flags used by the linker during DEBUG builds.
#cmakedefine CMAKE_EXE_LINKER_FLAGS_DEBUG ${CMAKE_EXE_LINKER_FLAGS_DEBUG}
// Flags used by the linker during MINSIZEREL builds.
#cmakedefine CMAKE_EXE_LINKER_FLAGS_MINSIZEREL ${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}
// Flags used by the linker during RELEASE builds.
#cmakedefine CMAKE_EXE_LINKER_FLAGS_RELEASE ${CMAKE_EXE_LINKER_FLAGS_RELEASE}
// Flags used by the linker during RELWITHDEBINFO builds.
#cmakedefine CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}
// No help, variable specified on the command line.
#cmakedefine CMAKE_EXPORT_COMPILE_COMMANDS ${CMAKE_EXPORT_COMPILE_COMMANDS}
// Value Computed by CMake.
#cmakedefine CMAKE_FIND_PACKAGE_REDIRECTS_DIR ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}
// Install path prefix, prepended onto install directories.
#cmakedefine CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}
// Path to a program.
#cmakedefine CMAKE_LINKER ${CMAKE_LINKER}
// Program used to build from build.ninja files.
#cmakedefine CMAKE_MAKE_PROGRAM ${CMAKE_MAKE_PROGRAM}
// Flags used by the linker during the creation of modules during all build types.
#cmakedefine CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS}
// Flags used by the linker during the creation of modules during DEBUG builds.
#cmakedefine CMAKE_MODULE_LINKER_FLAGS_DEBUG ${CMAKE_MODULE_LINKER_FLAGS_DEBUG}
// Flags used by the linker during the creation of modules during MINSIZEREL builds.
#cmakedefine CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL ${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL}
// Flags used by the linker during the creation of modules during RELEASE builds.
#cmakedefine CMAKE_MODULE_LINKER_FLAGS_RELEASE ${CMAKE_MODULE_LINKER_FLAGS_RELEASE}
// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
#cmakedefine CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO}
// Path to a program.
#cmakedefine CMAKE_NM ${CMAKE_NM}
// Path to a program.
#cmakedefine CMAKE_OBJCOPY ${CMAKE_OBJCOPY}
// Path to a program.
#cmakedefine CMAKE_OBJDUMP ${CMAKE_OBJDUMP}
// Path to a program.
#cmakedefine CMAKE_RANLIB ${CMAKE_RANLIB}
// Path to a program.
#cmakedefine CMAKE_READELF ${CMAKE_READELF}
// Flags used by the linker during the creation of shared libraries during all build types.
#cmakedefine CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS}
// Flags used by the linker during the creation of shared libraries during DEBUG builds.
#cmakedefine CMAKE_SHARED_LINKER_FLAGS_DEBUG ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}
// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
#cmakedefine CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL ${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL}
// Flags used by the linker during the creation of shared libraries during RELEASE builds.
#cmakedefine CMAKE_SHARED_LINKER_FLAGS_RELEASE ${CMAKE_SHARED_LINKER_FLAGS_RELEASE}
// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
#cmakedefine CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}
// If set, runtime paths are not added when installing shared libraries, but are added when building.
#cmakedefine CMAKE_SKIP_INSTALL_RPATH ${CMAKE_SKIP_INSTALL_RPATH}
// If set, runtime paths are not added when using shared libraries.
#cmakedefine CMAKE_SKIP_RPATH ${CMAKE_SKIP_RPATH}
// Flags used by the linker during the creation of static libraries during all build types.
#cmakedefine CMAKE_STATIC_LINKER_FLAGS ${CMAKE_STATIC_LINKER_FLAGS}
// Flags used by the linker during the creation of static libraries during DEBUG builds.
#cmakedefine CMAKE_STATIC_LINKER_FLAGS_DEBUG ${CMAKE_STATIC_LINKER_FLAGS_DEBUG}
// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
#cmakedefine CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL ${CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL}
// Flags used by the linker during the creation of static libraries during RELEASE builds.
#cmakedefine CMAKE_STATIC_LINKER_FLAGS_RELEASE ${CMAKE_STATIC_LINKER_FLAGS_RELEASE}
// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
#cmakedefine CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO}
//Path to a program.
#cmakedefine CMAKE_STRIP ${CMAKE_STRIP}
// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.
// This is useful for debugging only.
// With Visual Studio IDE projects all commands are done without /nologo.
#cmakedefine CMAKE_VERBOSE_MAKEFILE ${CMAKE_VERBOSE_MAKEFILE}

#endif // INCLUDE_CMODULE_CONFIG_H_
